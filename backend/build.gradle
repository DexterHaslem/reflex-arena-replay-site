buildscript {
	ext {
		springBootVersion = '1.3.6.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath ("org.flywaydb:flyway-gradle-plugin:4.0.3")
	}
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'org.flywaydb.flyway'

war {
// http://stackoverflow.com/questions/29848088/cannot-run-the-war-generated-from-gradle-bootrepackage-in-a-jhipster-based-web-a
    manifest {
        attributes 'Main-Class' : 'org.springframework.boot.loader.WarLauncher',
                'Start-Class': 'com.dmh.reflex.ReplaysApplication'
    }
    archiveName 'reflexreplays.war'
}

springBoot {
    mainClass = 'com.dmh.reflex.ReplaysApplication'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.postgresql:postgresql')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

flyway {
	Properties props = new Properties()
	props.load(new FileInputStream("${projectDir}/src/main/resources/application.properties"))
	url = props."spring.datasource.url"
	user = props."spring.datasource.username"
	password = props."spring.datasource.password"
}


//https://gist.github.com/jeremyjarrell/6083207
task prefixNewMigrations {
    fileTree(dir: 'src/main/resources/db/pendingmigration').exclude({ isFilePrefixed(it.file) }).each { file ->
        doLast {

            def epoc =  (long) Math.round(System.currentTimeMillis() / 1000L)
            def newFileName = "V${epoc}__$file.name";

            println "Renaming $file.name to $newFileName"


            file.renameTo($/${projectDir}\src\main\resources\db\migration\$newFileName/$)

            // Sleep for a moment to avoid prefix conflicts when renaming multiple files
            sleep(1*1000)
        }
    }
}

def isFilePrefixed(file) {
    return (file.name ==~ '^\\d+__.*\\.sql\$')
}